[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport pandas\nfrom shiny import render, reactive\nimport seaborn as sns\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\n\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\npenguins_df_r = penguins_df.rename(columns={\"bill_depth_mm\": \"Bill Depth (mm)\", \"bill_length_mm\": \"Bill Length (mm)\", \n\"flipper_length_mm\": \"Flipper Length (mm)\", \"body_mass_g\": \"Body Mass (g)\", \"species\": \"Species\", \"island\": \"Island\", \"sex\": \"Sex\", \"year\": \"Year\"})\n\n\n\nui.page_opts(title=\"Teslim\", fillable=True)\n\n#Shiny UI sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    # Create a dropdown input to choose a column \n    ui.input_selectize(\"selected_attribute\", \"Body Measurement in Millimeters\", choices=[\"Bill Length (mm)\", \"Bill Depth (mm)\", \"Flipper Length (mm)\", \"Body Mass (g)\"]) \n    \n    # Create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 10)\n    \n    # Create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 100, 50)\n\n    # Create a checkbox group input to filter the species\n    ui.input_checkbox_group(\"selected_species_list\", \"Selected Species of Penguins\", \n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=\"Adelie\", inline=False)\n\n    # Add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Add a hyperlink to the sidebar\n    ui.a(\"GitHub\",\n        href=\"https://github.com/Tezzyray/cintel-02-data\",\n        target=\"_blank\",)\n\n# Show Data\nwith ui.card(full_screen=False):\n\n    @render.data_frame\n    def penguins_datatable():\n        pen_dt = render.DataTable(filtered_data()) \n        return pen_dt\n\n# Show Data\nwith ui.card(full_screen=True):#with ui.card(full_screen=True):\n    @render.data_frame\n    def penguins_grid():\n        pen_grid = render.DataGrid(filtered_data())\n        return pen_grid\n\n# Plot Charts\nwith ui.card(full_screen=True):\n    @render_plotly  \n    def plot_plt():  \n        plot_px = px.histogram(filtered_data(),\n                            x=input.selected_attribute(),\n                            nbins=input.plotly_bin_count(),\n                            title=\"Plotly Penguin Body Measurements Histogram\",\n                            color=\"Species\",\n                            labels={\"count\": \"Count\"}\n                           )\n        plot_px.update_layout(yaxis_title=\"Count\")\n        return plot_px\n        \n    @render.plot  \n    def plot_sns():  \n        \n        plot_snshist = sns.histplot(data=filtered_data(),\n                            x=input.selected_attribute(),\n                            bins=input.seaborn_bin_count(),\n                            element=\"step\",\n                            hue=\"Species\",\n                            kde=False)\n        plot_snshist.set_title(\"Seaborn Histogram of Body Measurements by Species\")\n        return plot_snshist\n\n\n\n\n#Create Scatter plot\nwith ui.card(full_screen=True):\n\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        # Create a Plotly scatterplot using Plotly Express\n        return px.scatter(filtered_data(), x=\"Flipper Length (mm)\", y=\"Bill Length (mm)\", color=\"Species\", \n                          facet_row=\"Species\", facet_col=\"Sex\", title=\"Penguin Scatterplot\")\n\n\n# Pie Chart plot\nwith ui.card(full_screen=True):\n\n    ui.card_header(\"Plotly Pie Chart: Body Mass\")\n\n    @render_plotly\n    def plotly_pie():\n        pie_chart = px.pie(filtered_data(), values=\"Body Mass (g)\", names=\"Island\", title=\"Body mass on Islands\")\n        return pie_chart\n\n    @render_plotly\n    def plotly_pie_s():\n        pie_chart = px.pie(filtered_data(), values=\"Body Mass (g)\", names=\"Species\", title=\"Body mass from Species\")\n        return pie_chart\n\n# Add a reactive calculation to filter the data\n@reactive.calc\ndef filtered_data():\n    return penguins_df_r[penguins_df_r[\"Species\"].isin(input.selected_species_list())]\n", "type": "text"}]